#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Apr 12 11:04:20 2024

@author: Erik MÃ¥rtensson
"""

import matplotlib.pyplot as plt
import math

# Kyber512
pValues = list(range(1, 128 + 1))

# Adaptive approach - optimized for the average case
coeffPerQuery512Partial = [0.390722, 0.780761, 1.169541, 1.558025, 1.945332, 2.332215, 2.717417, 3.101606, 3.485747, 3.869395, 4.252483, 4.631852, 5.012065, 5.394588, 5.773993, 6.150142, 6.528968, 6.901181, 7.278002, 7.652135, 8.022711, 8.396816, 8.771105, 9.144193, 9.513179, 9.879402, 10.252483, 10.617063, 10.983543, 11.347492, 11.7087, 12.069853, 12.435287, 12.792591, 13.147202, 13.508224, 13.86409, 14.219782, 14.577415, 14.918119, 15.301023, 15.627961, 15.978013, 16.35761, 16.683569, 17.036332, 17.410217, 17.724328, 18.046867, 18.446339, 18.800234, 19.089167, 19.40536, 19.796665, 20.173864, 20.470768, 20.748429, 21.099, 21.467018, 21.836871, 22.14555, 22.379678, 22.716199, 23.084216, 23.460927, 23.813946, 24.094922, 24.330735, 24.6475, 24.99, 25.353458, 25.724, 26.064994, 26.367125, 26.586857, 26.831286, 27.114286, 27.458571, 27.802143, 28.154176, 28.532418, 28.868443, 29.202189, 29.434423, 29.626026, 29.869808, 30.165833, 30.504167, 30.850833, 31.198333, 31.535, 31.874091, 32.227045, 32.557, 32.749394, 32.913515, 33.034697, 33.105273, 33.319545, 33.613818, 33.943, 34.293, 34.608, 34.929, 35.258, 35.586, 35.914111, 36.248444, 36.566722, 36.802528, 37.049917, 37.155917, 37.275444, 37.340417, 37.565, 37.861806, 38.176111, 38.4625, 38.80625, 39.14, 39.46625, 39.795, 40.14625, 40.44125, 40.7625, 41.105, 41.41125, 41.70875]
coeffPerQuery512Full = [0.390722, 0.779673, 1.167058, 1.552262, 1.935158, 2.315658, 2.695029, 3.070448, 3.443583, 3.815439, 4.185679, 4.553068, 4.913892, 5.277058, 5.634864, 5.988655, 6.340285, 6.698363, 7.047834, 7.383359, 7.731124, 8.070962, 8.414612, 8.745377, 9.083339, 9.408942, 9.741808, 10.08155, 10.398886, 10.725571, 11.021466, 11.341233, 11.648221, 11.961248, 12.279104, 12.578377, 12.917818, 13.194234, 13.522227, 13.780182, 14.075081, 14.415758, 14.684526, 14.989549, 15.303481, 15.541418, 15.863378, 16.162252, 16.382659, 16.648709, 17.02836, 17.269159, 17.47778, 17.783102, 18.131348, 18.378014, 18.586255, 18.76083, 19.154343, 19.462356, 19.752697, 19.945026, 20.058585, 20.303511, 20.687682, 21.039604, 21.348545, 21.491014, 21.612437, 21.774335, 21.967431, 22.293153, 22.715724, 23.037229, 23.311756, 23.438961, 23.549784, 23.63955, 23.810216, 24.191621, 24.515398, 24.872421, 25.204889, 25.483053, 25.682125, 25.721263, 25.788632, 25.856, 25.993731, 26.088047, 26.421895, 26.68538, 26.929668, 27.462891, 27.796739, 28.197955, 28.361401, 28.43828, 28.546598, 28.56333, 28.628497, 28.712157, 28.881569, 28.948497, 29.117908, 29.39817, 29.776732, 30.161569, 30.657255, 31.017412, 31.456627, 31.720157, 31.913412, 32.007529, 32.045176, 32.064, 32.064, 32.085333, 32.085333, 32.106667, 32.106667, 32.170667, 32.298667, 32.341333, 32.426667, 32.518095, 32.69181, 32.801524]

# Adaptive approach - optimized for the worst case and thereafter for the average case
# coeffPerQuery512PartialWorst = [0.361878, 0.722855, 1.083242, 1.442001, 1.800377, 2.158012, 2.514512, 2.869963, 3.225559, 3.57885, 3.931755, 4.284702, 4.633594, 4.98369, 5.331513, 5.683055, 6.031616, 6.374465, 6.719786, 7.063802, 7.40967, 7.753112, 8.099025, 8.431348, 8.766206, 9.120207, 9.439059, 9.787566, 10.131963, 10.445366, 10.788267, 11.144136, 11.473923, 11.801517, 12.067846, 12.436794, 12.804921, 13.112967, 13.442816, 13.709641, 13.947416, 14.394193, 14.759621, 15.129363, 15.393401, 15.6625, 16.003995, 16.259749, 16.416892, 16.768756, 17.367267, 17.71875, 18.063062, 18.419313, 18.6424, 18.817154, 19.054545, 19.368896, 19.710671, 19.951989, 19.985186, 20.105714, 20.579038, 21.601988, 21.985, 22.331667, 22.668333, 23.015556, 23.349706, 23.670294, 23.88645, 23.98826, 23.788905, 23.796123, 23.982757, 24.30125, 24.62375, 24.945, 25.269167, 25.556625, 25.737702, 25.697006, 25.53703, 25.71426, 26.876566, 28.844167, 29.180833, 29.5075, 29.836667, 30.17, 30.515, 30.851667, 31.194167, 31.545833, 31.8725, 32.21, 32.545, 32.888333, 33.235, 33.565833, 33.860455, 34.061818, 34.250606, 34.302045, 34.063288, 33.485258, 32.872606, 32.07403, 31.680833, 31.720182, 31.669909, 31.781273, 32.022, 32.302, 32.594, 32.873, 33.151, 33.426, 33.712, 33.99, 34.261111, 34.489889, 34.622333, 34.505778, 34.187583, 33.775694, 33.597083, 33.8475]
# coeffPerQuery512FullWorst = [0.361878, 0.722368, 1.081354, 1.438997, 1.795192, 2.148823, 2.50085, 2.853615, 3.204173, 3.55182, 3.895818, 4.243227, 4.585636, 4.927156, 5.271684, 5.608256, 5.944896, 6.280303, 6.616371, 6.943841, 7.288768, 7.601641, 7.950998, 8.266531, 8.581209, 8.89584, 9.229607, 9.556687, 9.880905, 10.2041, 10.564876, 10.856417, 11.152696, 11.464123, 11.706852, 12.17644, 12.375861, 12.765807, 12.875487, 13.326165, 13.561081, 14.130172, 14.234413, 14.508818, 14.96871, 15.058824, 15.159216, 15.65918, 15.995777, 16.39157, 17.066667, 17.066667, 17.113747, 17.368066, 17.909911, 18.235271, 18.285714, 18.306032, 18.448254, 18.825429, 19.467253, 19.732859, 20.306051, 21.333333, 21.333333, 21.333333, 21.333333, 21.333333, 21.361159, 21.509565, 21.865402, 22.358682, 22.980975, 23.201897, 23.262609, 23.272727, 23.272727, 23.294892, 23.317056, 23.573056, 24.140468, 24.936173, 25.526857, 25.844023, 27.730339, 28.444444, 28.444444, 28.444444, 28.444444, 28.444444, 28.444444, 28.444444, 28.444444, 28.444444, 28.444444, 28.444444, 28.444444, 28.444444, 28.444444, 28.461176, 28.578301, 28.695425, 28.946405, 29.214118, 29.862484, 30.410458, 31.014902, 31.51268, 31.719739, 31.868235, 31.943529, 31.981176, 32, 32, 32, 32, 32, 32, 32, 32.064, 32.064, 32.32, 32.94781, 34.145524, 35.483429, 36.306989, 36.88463, 42.666667]

# One Positional Parallel approach
coeffPerQuery512PartialOne = [p/3 for p in pValues]
coeffPerQuery512FullOne = [256/math.ceil(256/p)/3 for p in pValues]

# Theoretical upper limit
upperLimitKyber512 = [2.5625]*len(pValues)

# Full recovery
plt.plot(pValues, [p/coeff for coeff,p in zip(coeffPerQuery512Full, pValues)], '*')
plt.plot(pValues, [p/coeff for coeff,p in zip(coeffPerQuery512FullOne, pValues)], 'o')
# plt.plot(pValues, [p/coeff for coeff,p in zip(coeffPerQuery512FullWorst, pValues)], '+')
plt.plot(pValues, upperLimitKyber512)

plt.xlabel('Parallelization level')
plt.ylabel('Expected number of queries')
plt.title('Full key recovery for Kyber512')
# plt.legend(['Adaptive', 'Non-adaptive', 'Adaptive (worst)', 'Theoretical Limit'])
plt.legend(['Adaptive', 'Non-adaptive', 'Theoretical Limit'])

# Partial recovery
plt.figure()
plt.plot(pValues, [p/coeff for coeff,p in zip(coeffPerQuery512Partial, pValues)])
plt.plot(pValues, [p/coeff for coeff,p in zip(coeffPerQuery512PartialOne, pValues)])
# plt.plot(pValues, [p/coeff for coeff,p in zip(coeffPerQuery512PartialWorst, pValues)])
plt.plot(pValues, upperLimitKyber512)
# plt.legend(['Adaptive', 'Non-adaptive', 'Adaptive (worst)', 'Theoretical Limit'])
plt.legend(['Adaptive', 'Non-adaptive', 'Theoretical Limit'])

plt.xlabel('Parallelization level')
plt.ylabel('Expected number of queries')
# plt.title('Partial key recovery for Kyber512')
plt.title('Kyber512')

# Best coefficients per query for Kyber512
pBest512 = [max(coeff1, coeff2) for coeff1,coeff2 in zip(coeffPerQuery512Partial,coeffPerQuery512PartialOne)]

# Kyber768

# Adaptive approach
coeffPerQuery768Partial = [0.432415, 0.863906, 1.294588, 1.724323, 2.153202, 2.581018, 3.008038, 3.433501, 3.858778, 4.283477, 4.708003, 5.13051, 5.549369, 5.971497, 6.389146, 6.809949, 7.225495, 7.64335, 8.052764, 8.475521, 8.882101, 9.295771, 9.70979, 10.120273, 10.536133, 10.943416, 11.344974, 11.746365, 12.150143, 12.572548, 12.956088, 13.365789, 13.765325, 14.15402, 14.562926, 14.949109, 15.346808, 15.763608, 16.116877, 16.559125, 16.920831, 17.296104, 17.732295, 18.095373, 18.467222, 18.898558, 19.282007, 19.612594, 20.00161, 20.446684, 20.812303, 21.121462, 21.512667, 21.9214, 22.348244, 22.672872, 22.998777, 23.372593, 23.769259, 24.200541, 24.577591, 24.838682, 25.139467, 25.52875, 25.92125, 26.311178, 26.746781, 27.123825, 27.42437, 27.742944, 28.096667, 28.502857, 28.895714, 29.278095, 29.674048, 30.061023, 30.359202, 30.531231, 30.713509, 31.058743, 31.435556, 31.832222, 32.202778, 32.577778, 32.971667, 33.356111, 33.76393, 34.057141, 34.160177, 34.301125, 34.646, 35.043333, 35.427333, 35.811333, 36.216667, 36.594, 36.988, 37.354667, 37.740667, 38.138095, 38.52481, 38.876907, 39.144791, 39.258833, 39.314504, 39.286612, 39.490714, 39.799487, 40.120192, 40.471667, 40.844167, 41.204167, 41.574167, 41.9525, 42.310833, 42.6775, 43.053333, 43.433333, 43.7925, 44.17, 44.545, 44.8975, 45.2625, 45.639167, 46.0125, 46.395, 46.753333, 47.116667, 43, 43.333333, 43.666667, 44, 44.333333, 44.666667, 45, 45.333333, 45.666667, 46, 46.333333, 46.666667, 47, 47.333333, 47.666667, 48.02125, 48.453333, 48.873333, 49.31375, 49.8325, 50.391071, 51.014405, 51.591964, 52.19244, 52.750655, 53.145595, 53.4925, 53.760893, 54.021905, 54.311905, 54.607619, 54.944524, 55.223333, 55.571667, 55.891667, 56.238333, 56.591667, 56.923333, 57.265, 57.616667, 57.93, 58.301667, 58.646667, 59.006667, 59.338333, 59.701667, 60.053333, 60.403333, 60.75, 61.116667, 61.458333, 61.791667, 62.135, 62.475, 62.835, 63.198333, 63.533333, 63.89, 64.243333, 64.591667, 64.953333, 65.3, 65.626667, 65.978333]
coeffPerQuery768Full = [0.432415, 0.863075, 1.291944, 1.718233, 2.142535, 2.564912, 2.984884, 3.402653, 3.819596, 4.229536, 4.640175, 5.046962, 5.454909, 5.85363, 6.25556, 6.653933, 7.053547, 7.444653, 7.833317, 8.226982, 8.610542, 8.999144, 9.388601, 9.771904, 10.154401, 10.521886, 10.867442, 11.23077, 11.624792, 12.01312, 12.317087, 12.756696, 13.052421, 13.476999, 13.758795, 14.207287, 14.444753, 14.958238, 15.152557, 15.595432, 15.988018, 16.144015, 16.65785, 17.041359, 17.15218, 17.531619, 18.116762, 18.295049, 18.411038, 18.831044, 19.477116, 19.707854, 19.74413, 19.970068, 20.618425, 21.195562, 21.327568, 21.351619, 21.510454, 21.903124, 22.655446, 23.135829, 23.272727, 23.28, 23.323636, 23.550499, 24.199226, 25.045677, 25.500903, 25.6, 25.6, 25.608828, 25.63531, 25.741241, 26.036966, 26.865918, 27.56701, 28.201336, 28.413968, 28.444444, 28.444444, 28.444444, 28.444444, 28.488205, 28.564786, 28.753395, 29.652349, 30.895152, 31.744985, 31.9744, 32, 32, 32, 32, 32, 32, 32.027826, 32.13913, 32.208696, 32.417391, 32.904529, 33.663964, 34.419424, 35.229814, 35.949497, 36.275099, 36.438442, 36.538182, 36.571429, 36.571429, 36.571429, 36.571429, 36.571429, 36.571429, 36.571429, 36.571429, 36.571429, 36.571429, 36.571429, 36.571429, 36.608, 36.626286, 36.644571, 36.772571, 37.010286, 37.68397, 39.142015, 42.666667, 42.666667, 42.666667, 42.666667, 42.666667, 42.666667, 42.666667, 42.666667, 42.666667, 42.666667, 42.666667, 42.666667, 42.666667, 42.716863, 42.792157, 42.842353, 43.043137, 43.221961, 43.479216, 43.912157, 44.599843, 45.43498, 46.348549, 47.441569, 48.459294, 48.916706, 49.643922, 50.197961, 50.730667, 51.04, 51.072, 51.104, 51.168, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2]

pValues = list(range(1, 192 + 1))

# One Positional Parallel approach
coeffPerQuery768PartialOne = [p/3 for p in pValues]
coeffPerQuery768FullOne = [256/math.ceil(256/p)/3 for p in pValues]

# Pairwise Parallel approach
coeffPerQuery768PartialPair = [2*p/5 for p in pValues[0:128]]
coeffPerQuery768FullPair = [256/math.ceil(256/2/p)/5 for p in pValues[0:128]]

# Theoretical upper limit
upperLimitKyber768 = [2.3125]*len(pValues)

# Full recovery
plt.figure()

plt.plot(pValues, [p/coeff for coeff,p in zip(coeffPerQuery768Full, pValues)], '*')
plt.plot(pValues, [p/coeff for coeff,p in zip(coeffPerQuery768FullOne, pValues)], 'o')
plt.plot(pValues, upperLimitKyber768)
plt.plot(pValues[0:128], [p/coeff for coeff,p in zip(coeffPerQuery768FullPair, pValues[0:128])], '+')


plt.xlabel('Parallelization level')
plt.ylabel('Expected number of queries')
plt.title('Full key recovery for Kyber768')
plt.legend(['Adaptive', 'Non-adaptive', 'Theoretical Limit', 'Pairwise'])

# Partial recovery
plt.figure()

plt.plot(pValues, [p/coeff for coeff,p in zip(coeffPerQuery768Partial, pValues)])
plt.plot(pValues, [p/coeff for coeff,p in zip(coeffPerQuery768PartialOne, pValues)])
plt.plot(pValues, upperLimitKyber768)
plt.plot(pValues[0:128], [p/coeff for coeff,p in zip(coeffPerQuery768PartialPair, pValues[0:128])])


plt.xlabel('Parallelization level')
plt.ylabel('Expected number of queries')
plt.title('Partial key recovery for Kyber768')
plt.legend(['Adaptive', 'Non-adaptive', 'Theoretical Limit', 'Pairwise'])

# Kyber1024
coeffPerQuery1024Partial = [0.432595, 0.864265, 1.295136, 1.725118, 2.153975, 2.582342, 3.0094, 3.435083, 3.860424, 4.2852, 4.710061, 5.132144, 5.552557, 5.974396, 6.393584, 6.812665, 7.22941, 7.647182, 8.057262, 8.477859, 8.886099, 9.302002, 9.715358, 10.125747, 10.539873, 10.949017, 11.348717, 11.749529, 12.1586, 12.577975, 12.960981, 13.373972, 13.773659, 14.16366, 14.572617, 14.963529, 15.358494, 15.773211, 16.135163, 16.571421, 16.932145, 17.313697, 17.746923, 18.108732, 18.480417, 18.913658, 19.289453, 19.631222, 20.024434, 20.462384, 20.819759, 21.140999, 21.53575, 21.951146, 22.373818, 22.685915, 23.016242, 23.396944, 23.804167, 24.229365, 24.598576, 24.855872, 25.176714, 25.560938, 25.942812, 26.341169, 26.784715, 27.150387, 27.439753, 27.751527, 28.111071, 28.520714, 28.910357, 29.296786, 29.691349, 30.079505, 30.376967, 30.559864, 30.749183, 31.08925, 31.46375, 31.861667, 32.240417, 32.615833, 33.00625, 33.381667, 33.792187, 34.076392, 34.169137, 34.341, 34.663, 35.059, 35.4345, 35.8295, 36.224, 36.6045, 36.99, 37.3615, 37.7465, 38.146357, 38.538637, 38.902151, 39.172721, 39.26951, 39.335857, 39.33627, 39.55548, 39.85364, 40.186838, 40.55, 40.921875, 41.288125, 41.66, 42.0375, 42.3925, 42.761875, 43.13625, 43.511875, 43.868125, 44.24875, 44.6275, 44.98375, 45.3475, 45.723125, 46.09125, 46.47125, 46.83125, 47.200625, 43, 43.333333, 43.666667, 44, 44.333333, 44.666667, 45, 45.333333, 45.666667, 46, 46.333333, 46.666667, 47, 47.333333, 47.666667, 48.015455, 48.420606, 48.830303, 49.276909, 49.804545, 50.34901, 50.993508, 51.645833, 52.263566, 52.807957, 53.226518, 53.57926, 53.860333, 54.130619, 54.431389, 54.725972, 55.07125, 55.37125, 55.71375, 56.05, 56.38875, 56.745, 57.08625, 57.42625, 57.7825, 58.1025, 58.47375, 58.81125, 59.17375, 59.505, 59.86125, 60.22125, 60.57, 60.915, 61.2775, 61.6325, 61.97, 62.3125, 62.64375, 62.99625, 63.35875, 63.69125, 64.0375, 64.405, 64.76625, 65.12, 65.46625, 65.795, 66.14875, 66.47875, 66.84625, 67.18875, 67.53375, 67.8775, 68.235, 68.58625, 68.925, 69.25875, 69.605, 69.94625, 70.3075, 70.6525, 70.99, 71.33, 71.6825, 72.03375, 72.3675, 72.7475, 73.07125, 73.40625, 73.77, 74.1075, 74.445, 74.80375, 75.1675, 75.49625, 75.83625, 76.165, 76.49375, 76.83375, 77.17, 77.51625, 77.8575, 78.18375, 78.525, 78.85875, 79.19625, 79.525, 79.8625, 80.22, 80.5675, 80.92, 81.25625, 81.60375, 81.935, 82.275, 82.605, 82.9475, 83.2825, 83.61625, 83.965, 84.32625, 84.685, 85.0375, 85.38125, 85.74, 86.06625, 86.3925, 86.7425, 87.09125, 87.43125, 87.76, 88.1]
coeffPerQuery1024Full = [0.432595, 0.863445, 1.292425, 1.718933, 2.143453, 2.56575, 2.98624, 3.404188, 3.820081, 4.231038, 4.642927, 5.049038, 5.457827, 5.855736, 6.256846, 6.65537, 7.055215, 7.447231, 7.838207, 8.230121, 8.611353, 9.002132, 9.389303, 9.773662, 10.152526, 10.525272, 10.875059, 11.242449, 11.631554, 12.020392, 12.324995, 12.761045, 13.062886, 13.483273, 13.773071, 14.213028, 14.45953, 14.967856, 15.158058, 15.58978, 15.990921, 16.148203, 16.660151, 17.041956, 17.159531, 17.544249, 18.126193, 18.302571, 18.425843, 18.866962, 19.496731, 19.703891, 19.746365, 19.965731, 20.657861, 21.203069, 21.333519, 21.356028, 21.515894, 21.920577, 22.685468, 23.143434, 23.267556, 23.288964, 23.321438, 23.56707, 24.168965, 25.070416, 25.494151, 25.6, 25.6, 25.606564, 25.639385, 25.737846, 26.072643, 26.894516, 27.616297, 28.206531, 28.413694, 28.444444, 28.444444, 28.444444, 28.444444, 28.485079, 28.558222, 28.790124, 29.6894, 30.902145, 31.739893, 31.980606, 32, 32, 32, 32, 32, 32, 32.020645, 32.134194, 32.227785, 32.467269, 32.949498, 33.714386, 34.523785, 35.320237, 35.97496, 36.297272, 36.457931, 36.546207, 36.571429, 36.571429, 36.571429, 36.571429, 36.571429, 36.571429, 36.571429, 36.571429, 36.571429, 36.571429, 36.571429, 36.571429, 36.598519, 36.625608, 36.652698, 36.747513, 36.980904, 37.619726, 39.08523, 42.666667, 42.666667, 42.666667, 42.666667, 42.666667, 42.666667, 42.666667, 42.666667, 42.666667, 42.666667, 42.666667, 42.666667, 42.666667, 42.703768, 42.75942, 42.833623, 43.00058, 43.169223, 43.454229, 43.982323, 44.63791, 45.440891, 46.47448, 47.581741, 48.577024, 49.109261, 49.749044, 50.237772, 50.743122, 51.053714, 51.102476, 51.126857, 51.175619, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.2, 51.253895, 51.280842, 51.307789, 51.334737, 51.361684, 51.415579, 51.550316, 51.712, 52.017404, 52.691616, 53.302423, 54.409379, 56.322774, 59.418859, 85.333333]

pValues = list(range(1, 256 + 1))

# One Positional Parallel approach
coeffPerQuery1024PartialOne = [p/3 for p in pValues]
coeffPerQuery1024FullOne = [256/math.ceil(256/p)/3 for p in pValues]

# Pairwise Parallel approach
coeffPerQuery1024PartialPair = [2*p/5 for p in pValues[0:128]]
coeffPerQuery1024FullPair = [256/math.ceil(256/2/p)/5 for p in pValues[0:128]]

# Theoretical upper limit
upperLimitKyber1024 = [2.3125]*len(pValues)

# Full recovery
plt.figure()

plt.plot(pValues, [p/coeff for coeff,p in zip(coeffPerQuery1024Full, pValues)], '*')
plt.plot(pValues, [p/coeff for coeff,p in zip(coeffPerQuery1024FullOne, pValues)], 'o')
plt.plot(pValues, upperLimitKyber1024)
plt.plot(pValues[0:128], [p/coeff for coeff,p in zip(coeffPerQuery1024FullPair, pValues[0:128])], '+')


plt.xlabel('Parallelization level')
plt.ylabel('Expected number of queries')
plt.title('Full key recovery for Kyber1024')
plt.legend(['Adaptive', 'Non-adaptive', 'Theoretical Limit', 'Pairwise'])

# Partial recovery
plt.figure()

plt.plot(pValues, [p/coeff for coeff,p in zip(coeffPerQuery1024Partial, pValues)])
plt.plot(pValues, [p/coeff for coeff,p in zip(coeffPerQuery1024PartialOne, pValues)])
plt.plot(pValues, upperLimitKyber1024)
plt.plot(pValues[0:128], [p/coeff for coeff,p in zip(coeffPerQuery1024PartialPair, pValues[0:128])])

plt.xlabel('Parallelization level')
plt.ylabel('Expected number of queries')
# plt.title('Partial key recovery for Kyber1024')
plt.title('Kyber1024')
plt.legend(['Adaptive', 'Non-adaptive', 'Theoretical Limit', 'Pairwise'])